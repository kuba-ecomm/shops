// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package shops

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopsServiceClient is the client API for ShopsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopsServiceClient interface {
	ShopBy(ctx context.Context, in *ShopGetter, opts ...grpc.CallOption) (*Shop, error)
	CreateStock(ctx context.Context, in *Stock, opts ...grpc.CallOption) (*StockEmpty, error)
}

type shopsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopsServiceClient(cc grpc.ClientConnInterface) ShopsServiceClient {
	return &shopsServiceClient{cc}
}

func (c *shopsServiceClient) ShopBy(ctx context.Context, in *ShopGetter, opts ...grpc.CallOption) (*Shop, error) {
	out := new(Shop)
	err := c.cc.Invoke(ctx, "/models.ShopsService/ShopBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopsServiceClient) CreateStock(ctx context.Context, in *Stock, opts ...grpc.CallOption) (*StockEmpty, error) {
	out := new(StockEmpty)
	err := c.cc.Invoke(ctx, "/models.ShopsService/CreateStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopsServiceServer is the server API for ShopsService service.
// All implementations must embed UnimplementedShopsServiceServer
// for forward compatibility
type ShopsServiceServer interface {
	ShopBy(context.Context, *ShopGetter) (*Shop, error)
	CreateStock(context.Context, *Stock) (*StockEmpty, error)
	mustEmbedUnimplementedShopsServiceServer()
}

// UnimplementedShopsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShopsServiceServer struct {
}

func (UnimplementedShopsServiceServer) ShopBy(context.Context, *ShopGetter) (*Shop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopBy not implemented")
}
func (UnimplementedShopsServiceServer) CreateStock(context.Context, *Stock) (*StockEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStock not implemented")
}
func (UnimplementedShopsServiceServer) mustEmbedUnimplementedShopsServiceServer() {}

// UnsafeShopsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopsServiceServer will
// result in compilation errors.
type UnsafeShopsServiceServer interface {
	mustEmbedUnimplementedShopsServiceServer()
}

func RegisterShopsServiceServer(s grpc.ServiceRegistrar, srv ShopsServiceServer) {
	s.RegisterService(&ShopsService_ServiceDesc, srv)
}

func _ShopsService_ShopBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopGetter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopsServiceServer).ShopBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.ShopsService/ShopBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopsServiceServer).ShopBy(ctx, req.(*ShopGetter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopsService_CreateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopsServiceServer).CreateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.ShopsService/CreateStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopsServiceServer).CreateStock(ctx, req.(*Stock))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopsService_ServiceDesc is the grpc.ServiceDesc for ShopsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.ShopsService",
	HandlerType: (*ShopsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShopBy",
			Handler:    _ShopsService_ShopBy_Handler,
		},
		{
			MethodName: "CreateStock",
			Handler:    _ShopsService_CreateStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
